<<<<<<< HEAD
import baseURL from "../config/configUrl";
=======
import { api, requestConfig } from "../utils/config.jsx";
>>>>>>> origin/master

const fetchProducts = async () => {
    const response = await fetch(`${api}/product`);
    if (!response.ok) {
        throw new Error('Erro ao buscar produtos');
    }
    return await response.json();
};

const createProduct = async (productData) => {
    const config = requestConfig("POST", productData);
    const response = await fetch(`${api}/product`, config);
    if (!response.ok) {
        throw new Error('Erro ao criar produto');
    }
    return response.json();
};

const updateProduct = async (id, productData) => {
    const config = requestConfig("PUT", productData);
    const response = await fetch(`${api}/product/${id}`, config);
    if (!response.ok) {
        throw new Error('Erro ao atualizar produto');
    }
    return response.json();
};

const deleteProduct = async (id) => {
    const config = requestConfig("DELETE");
    const response = await fetch(`${api}/product/${id}`, config);
    if (!response.ok) {
        throw new Error('Erro ao excluir produto');
    }
    return id;
};

const productService = {
<<<<<<< HEAD

    getProducts: async () => {
        const response = await baseURL.get('/product'); // conferir se Ã© esse mesmo o endponit
        return response.data;
    },
    addProduct: async (product) => {
        const response = await baseURL.post("/product", product);
        return response.data;
    },
    updateProduct: async ( id, product ) => {
        const response = await baseURL.patch(`/product/${id}`, product);
        return response.data;
    },
    deleteProduct: async (id) => {
        await baseURL.delete(`/product/${id}`);
    },
=======
    fetchProducts,
    createProduct,
    updateProduct,
    deleteProduct,
>>>>>>> origin/master
};

export default productService;
